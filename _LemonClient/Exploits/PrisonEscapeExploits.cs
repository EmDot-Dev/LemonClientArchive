using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.SceneManagement;
using VRC;
using VRC.Core;
using VRC.Udon;
using VRC.SDKBase;
using MelonLoader;
using UnityEngine.UI;
using VRC.UI.Elements.Menus;
using System.Collections;
using VRC.SDK3.Components;
using TMPro;

namespace _LemonClient.Exploits
{
    public class PrisonEscapeExploits
    {
        //100% stealing basic logic from the Murder exploits, and repurposing them for Prison Escape
        //Skid central, I know

        public static bool loopPurple;
        public static bool loopRed;
        public static bool loopGreen;
        public static bool loopBlue;
        public static bool loopGold;

        public static void BringBaseWeapon(string weaponName)
        {
            GameObject gunContainer = GameObject.Find("Items/Static Guns");
            for(int i = 0; i < gunContainer.transform.childCount; i++)
            {
                Transform child = gunContainer.transform.GetChild(i);
                if(child.name == weaponName)                            //Found called weapon
                {
                    Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, child.gameObject);        //Sets child to local owner
                    child.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.2f, 0f);
                }
            }
        }

        public static IEnumerator PatreonSkin_Select(string patronCode)
        {
            GameObject gunParent = GameObject.Find("Items/Static Guns");
            for(int i = 0; i < gunParent.transform.childCount; i++)
            {
                GameObject childGO = gunParent.transform.GetChild(i).gameObject;
                UdonBehaviour[] gunBehav = childGO.GetComponents<UdonBehaviour>();
                if(patronCode == "Green")
                {
                    gunBehav[0].SendCustomNetworkEvent(0, "EnablePatronEffects1");
                } else if (patronCode == "Blue")
                {
                    gunBehav[0].SendCustomNetworkEvent(0, "EnablePatronEffects2");
                } else if (patronCode == "Purple")
                {
                    gunBehav[0].SendCustomNetworkEvent(0, "EnablePatronEffects3");
                } else if (patronCode == "Red")
                {
                    gunBehav[0].SendCustomNetworkEvent(0, "EnablePatronEffects4");
                } else if (patronCode == "Gold")
                {
                    gunBehav[0].SendCustomNetworkEvent(0, "EnablePatronEffects0");
                } else if (patronCode == "None")
                {
                    gunBehav[0].SendCustomNetworkEvent(0, "DisablePatronEffects");
                }
                yield return null;
            }
        }

        public static IEnumerator RGBPatreonGuns(bool toggleGayGuns, float gayTime)
        {
            for(; ; )
            {
                if (toggleGayGuns)
                {
                    GameObject gunParent = GameObject.Find("Items/Static Guns");
                    for (int i = 0; i < gunParent.transform.childCount; i++)
                    {
                        GameObject childGO = gunParent.transform.GetChild(i).gameObject;
                        UdonBehaviour[] gunBehav = childGO.GetComponents<UdonBehaviour>();
                        MelonCoroutines.Start(GayGunMethod(gayTime, gunBehav, true));
                        yield return null;
                    }
                    yield return null;
                } else
                {
                    GameObject gunParent = GameObject.Find("Items/Static Guns");
                    for (int i = 0; i < gunParent.transform.childCount; i++)
                    {
                        GameObject childGO = gunParent.transform.GetChild(i).gameObject;
                        UdonBehaviour[] gunBehav = childGO.GetComponents<UdonBehaviour>();
                        MelonCoroutines.Start(GayGunMethod(gayTime, gunBehav, false));
                        yield return null;
                    }
                }
            }
        }
        /*                                                                                                                  Disabled due to inefficent code, causing lag
        public static IEnumerator GayGunMethod(float gayTime, UdonBehaviour[] gunBehav, bool loopActive)
        {
            if(loopActive)
            {
                gunBehav[0].SendCustomNetworkEvent(0, "EnablePatronEffects1");
                yield return new WaitForSeconds(gayTime);
                gunBehav[0].SendCustomNetworkEvent(0, "DisablePatronEffects");
                yield return new WaitForSeconds(0.05f);
                gunBehav[0].SendCustomNetworkEvent(0, "EnablePatronEffects2");
                yield return new WaitForSeconds(gayTime);
                gunBehav[0].SendCustomNetworkEvent(0, "DisablePatronEffects");
                yield return new WaitForSeconds(0.05f);
                gunBehav[0].SendCustomNetworkEvent(0, "EnablePatronEffects3");
                yield return new WaitForSeconds(gayTime);
                gunBehav[0].SendCustomNetworkEvent(0, "DisablePatronEffects");
                yield return new WaitForSeconds(0.05f);
                gunBehav[0].SendCustomNetworkEvent(0, "EnablePatronEffects4");
                yield return new WaitForSeconds(gayTime);
                gunBehav[0].SendCustomNetworkEvent(0, "DisablePatronEffects");
                yield return new WaitForSeconds(0.05f);
                gunBehav[0].SendCustomNetworkEvent(0, "EnablePatronEffects0");
                yield return new WaitForSeconds(gayTime);
                gunBehav[0].SendCustomNetworkEvent(0, "DisablePatronEffects");
                yield return new WaitForSeconds(0.05f);
            } else
            {
                yield return null;
            }
            yield return null;
        }
           */ 

        public static void StartCountdown()
        {
            foreach(GameObject gameObject in Resources.FindObjectsOfTypeAll<GameObject>())
            {
                if(gameObject.name.Contains("Game Manager"))
                {
                    gameObject.GetComponent<UdonBehaviour>().SendCustomNetworkEvent(0, "StartGameCountdown");
                }
            }
        }

        public static void BringRewardGun(string rewardSize, string rewardName)
        {
            if(rewardSize == "Large")
            {
                GameObject largeRewardGO = GameObject.Find("Crates/Large Rewards");

                for(int i = 0; i < largeRewardGO.transform.childCount; i++)
                {
                    Transform child = largeRewardGO.transform.GetChild(i);
                    if (child.name == rewardName)                            //Found called weapon
                    {
                        //Run Udon
                        GameObject rewardGO = child.gameObject;
                        UdonBehaviour[] udonBehav = rewardGO.GetComponents<UdonBehaviour>();
                        udonBehav[0].SendCustomNetworkEvent(0, "SyncedReset");
                        //Set pos
                        Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, child.gameObject);        //Sets child to local owner
                        child.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.2f, 0f);
                    }
                }
            } 
        }

    }
}
