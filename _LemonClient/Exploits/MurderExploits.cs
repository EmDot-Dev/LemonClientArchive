using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.SceneManagement;
using VRC;
using VRC.Core;
using VRC.Udon;
using VRC.SDKBase;
using MelonLoader;
using UnityEngine.UI;
using VRC.UI.Elements.Menus;
using System.Collections;
using VRC.SDK3.Components;
using TMPro;

namespace _LemonClient.Exploits
{
    public class MurderExploits
    {
        public static bool setKillAuraLeft;
        public static bool setKillAuraRight;
        public static bool isFindingKiller;
        public static bool infRevolver = false;
        static GameObject murdererNameInstance;
        public static bool murderNameplateBool;
        public static GameObject[] doorArray;
        /*
         * 1 = revolver
         * 2 = luger
         * 3 = shotgun
         * 4 = knife
         * 5 = grenade
         * 6 = smoke
         */

        public static void DeleteBounds(string boundName, bool toggleState)
        {
            if (boundName == "Game Logic/Game Area Bounds")
            {
                if(GlobalVariables.murderGameArea != null)
                {
                    GlobalVariables.murderGameArea = GameObject.Find(boundName);
                }
                GlobalVariables.murderGameArea.SetActive(toggleState);
            } else if (boundName == "Game Logic/Lobby Area Bounds" && GlobalVariables.murderLobbyArea != null)
            {
                if(GlobalVariables.murderLobbyArea != null)
                {
                    GlobalVariables.murderLobbyArea = GameObject.Find(boundName);
                }
                GlobalVariables.murderLobbyArea.SetActive(toggleState);
            }
        }

        public static void BringRoleWeapon(int requestedWeapon)
        {
            GameObject weaponObject = GameObject.Find("Game Logic/Weapons");
            bool gunCheck = !weaponObject;
            if (!gunCheck)                                                                                                                        //If the gun exists
            {
                for (int i = 0; i < weaponObject.transform.childCount; i++)
                {
                    Transform child = weaponObject.transform.GetChild(i);
                    bool revFlag = child && child.name == "Revolver" && requestedWeapon == 1;
                    bool knifeFlag = child && child.name == "Knife (0)" && requestedWeapon == 4;
                    if (revFlag)
                    {
                        Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, child.gameObject);        //Sets gun to local owner
                        child.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.2f, 0f);
                    }
                    if (knifeFlag)
                    {
                        Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, child.gameObject);        //Sets gun to local owner
                        child.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.2f, 0f);
                    }
                }
            }
        }

        public static void BringClueWeapon(int requestedWeapon)
        {
            GameObject unlockObject = GameObject.Find("Game Logic/Weapons/Unlockables");
            bool nullCheck = !unlockObject;
            if (!nullCheck)
            {
                for (int i = 0; i < unlockObject.transform.childCount; i++)
                {
                    Transform child = unlockObject.transform.GetChild(i);
                    bool lugerFlag = child && child.name == "Luger (0)" && requestedWeapon == 2;
                    bool shotFlag = child && child.name == "Shotgun (0)" && requestedWeapon == 3;
                    bool boomFlag = child && child.name == "Frag (0)" && requestedWeapon == 5;
                    bool smokeFlag = child && child.name == "Smoke (0)" && requestedWeapon == 6;
                    if (lugerFlag)
                    {
                        Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, child.gameObject);        //Sets luger to local owner
                        child.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.2f, 0f);
                    }
                    if (shotFlag)
                    {
                        Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, child.gameObject);        //Sets shotgun to local owner
                        child.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.2f, 0f);
                    }
                    if (boomFlag)
                    {
                        Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, child.gameObject);        //Sets grenade to local owner
                        child.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.2f, 0f);
                    }
                    if (smokeFlag)
                    {
                        Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, child.gameObject);        //Sets smoke to local owner
                        child.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.2f, 0f);
                    }
                }
            }
        }

        public static void RespawnPickups()
        {
            foreach (VRC_Pickup vrc_Pickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
            {
                Networking.LocalPlayer.TakeOwnership(vrc_Pickup.gameObject);
                vrc_Pickup.transform.localPosition = new Vector3(0f, -100000f, 0f);
            }
        }

        public static void ForceGrab()
        {
            foreach (VRC_Pickup vrc_Pickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
            {
                vrc_Pickup.pickupable = true;
                vrc_Pickup.DisallowTheft = false;
            }
        }

        public static void FindKiller(float waitTime)
        {
            if (isFindingKiller == true)
            {
                return;
            }
            isFindingKiller = true;
            MelonLoader.MelonCoroutines.Start(FindKillerEnumerator(waitTime));
        }

        public static System.Collections.IEnumerator FindKillerEnumerator(float waitTime)   //Shots MunchenClient! Love the code
        {
            yield return new WaitForSeconds(waitTime);
            GameObject murdererName = GameObject.Find("Game Logic/Game Canvas/Postgame/Murderer Name");
            if(murdererName != null)
            {
                string playerName = murdererName.GetComponent<Text>().text;
                if(playerName != ExtraDependencies.PlayerWrapper.LocalPlayer().name)
                {
                    ExtraDependencies.APIUtils.ShowAlert(ExtraDependencies.APIUtils.GetQuickMenuInstance(), "Murderer is: " + playerName);
                }
            }
        }

        public static void AntiBlind(bool toggleState)
        {
            GameObject blindHud = GameObject.Find("Game Logic/Player HUD/Blind HUD Anim");
            GameObject flashbangHud = GameObject.Find("Game Logic/Player HUD/Flashbang HUD Anim");

            if (blindHud != null)
            {
                blindHud.transform.localScale = toggleState ? new Vector3(0.0f, 0.0f, 0.0f) : new Vector3(1.0f, 1.0f, 1.0f);
            }

            if (flashbangHud != null)
            {
                flashbangHud.transform.localScale = toggleState ? new Vector3(0.0f, 0.0f, 0.0f) : new Vector3(1.0f, 1.0f, 1.0f);
            }
        }

        public static void TargetBoom()
        {
            GameObject grenade = GameObject.Find("Game Logic/Weapons/Unlockables/Frag (0)");
            Transform selPlayer = GlobalVariables.selectedPlayer.transform;

            UdonBehaviour[] grenadeUdon = grenade.GetComponents<UdonBehaviour>();

            Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, grenade);
            grenade.transform.position = selPlayer.position + new Vector3(0f, 0.2f, 0f);
            grenadeUdon[0].SendCustomNetworkEvent(0, "Explode");
        }

        //Lots of the below code has been adapted from other peoples work to make it suit purpose, 
        //or to make it slightly more efficient

        public static IEnumerator GoldenGunForYou()
        {
            VRCPickup revolver = GameObject.Find("Revolver").GetComponent<VRCPickup>();
            for (; ; )
            {
                if (revolver.currentPlayer != null)
                {
                    VRCPlayerApi playerVrcPlayerApi = revolver.currentPlayer;
                    if (playerVrcPlayerApi.displayName.Equals(APIUser.CurrentUser.displayName) && GameObject.Find("geo (patron)") == null)
                    {
                        UdonBehaviour[] revolverEvent = GameObject.Find("Revolver").GetComponents<UdonBehaviour>();
                        revolverEvent[0].SendCustomNetworkEvent(0, "PatronSkin");
                        revolverEvent = null;
                    }
                    yield return null;
                    playerVrcPlayerApi = null;
                }
                yield return null;
            }
        }
        
        public static IEnumerator GlobalGoldenGun()
        {
            while(GlobalVariables.globalGoldenGun)
            {
                VRCPickup revolver = GameObject.Find("Revolver").GetComponent<VRCPickup>();
                for (; ;)
                {
                    if(revolver.currentPlayer != null)
                    {
                        if(GameObject.Find("geo (patron)") == null)
                        {
                            UdonBehaviour[] revolverEvent = GameObject.Find("Revolver").GetComponents<UdonBehaviour>();
                            revolverEvent[0].SendCustomNetworkEvent(0, "PatronSkin");
                        }
                    }
                    yield return null;
                }
            }
        }

        public static IEnumerator ClueEsp()
        {
            List<Renderer> cluesFound = new List<Renderer>();
            Transform[] allObjects = Resources.FindObjectsOfTypeAll<Transform>();
            Transform[] array = allObjects;
            foreach (Transform transform in array)
            {
                if (transform.gameObject.name.Equals("Clue (photograph)") || transform.gameObject.name.Equals("Clue (notebook)") || transform.gameObject.name.Equals("Clue (locket)") || transform.gameObject.name.Equals("Clue (pocketwatch)") || transform.gameObject.name.Equals("Clue (postcard)"))
                {
                    cluesFound.Add(transform.GetChild(0).gameObject.GetComponent<Renderer>());
                }
            }
            for (; ; )
            {
                foreach (Renderer renderer in cluesFound)
                {
                    if (renderer != null)
                    {
                        bool activeInHierarchy = renderer.gameObject.activeInHierarchy;
                        if (activeInHierarchy)
                        {
                            HighlightsFX.field_Private_Static_HighlightsFX_0.Method_Public_Void_Renderer_Boolean_0(renderer, true);
                        }
                        else
                        {
                            HighlightsFX.field_Private_Static_HighlightsFX_0.Method_Public_Void_Renderer_Boolean_0(renderer, false);
                        }
                    }
                    yield return new WaitForSeconds(0.2f);
                }
                yield return new WaitForSeconds(2f);
            }
        }

        public static void SelfBystander()
        {
            VRCPlayer component = VRCPlayer.field_Internal_Static_VRCPlayer_0.gameObject.GetComponent<VRCPlayer>();
            string value = component._player.ToString();
            for (int i = 0; i < 24; i++)
            {
                string text = "Player Node (" + i.ToString() + ")";
                string text2 = "Game Logic/Game Canvas/Game In Progress/Player List/Player List Group/Player Entry (" + i.ToString() + ")/Player Name Text";
                if (GameObject.Find(text2).GetComponent<Text>().text.Equals(value))
                {
                    MelonLogger.Msg(text);
                    UdonBehaviour component2 = GameObject.Find(text).GetComponent<UdonBehaviour>();
                    component2.SendCustomNetworkEvent(0, "SyncAssignB");
                }
            }
        }

        public static void SelfMurderer()
        {
            VRCPlayer component = VRCPlayer.field_Internal_Static_VRCPlayer_0.gameObject.GetComponent<VRCPlayer>();
            string value = component._player.ToString();
            for (int i = 0; i < 24; i++)
            {
                string text = "Player Node (" + i.ToString() + ")";
                string text2 = "Game Logic/Game Canvas/Game In Progress/Player List/Player List Group/Player Entry (" + i.ToString() + ")/Player Name Text";
                if (GameObject.Find(text2).GetComponent<Text>().text.Equals(value))
                {
                    MelonLogger.Msg(text);
                    UdonBehaviour component2 = GameObject.Find(text).GetComponent<UdonBehaviour>();
                    component2.SendCustomNetworkEvent(0, "SyncAssignM");
                }
            }
        }

        public static IEnumerator InfiniteRevolver()
        {
            GameObject revolver = GameObject.Find("Revolver");
            VRCHandGrasper[] hand = UnityEngine.Object.FindObjectsOfType<VRCHandGrasper>();
            UdonBehaviour revolverUdon = revolver.GetComponent<UdonBehaviour>();
            GameObject luger0 = GameObject.Find("Luger (0)");
            UdonBehaviour luger0Udon = luger0.GetComponent<UdonBehaviour>();
            GameObject shotgun = GameObject.Find("Shotgun (0)");
            UdonBehaviour shotgunUdon = shotgun.GetComponent<UdonBehaviour>();
            GameObject camera = GameObject.Find("FlashCamera");
            UdonBehaviour cameraUdon = camera.GetComponent<UdonBehaviour>();
            bool stopperRight = false;
            bool stopperLeft = false;
            for (; ; )
            {
                if (hand[0].field_Internal_VRC_Pickup_0 != null)
                {
                    if (hand[0].field_Internal_VRC_Pickup_0.gameObject.name.Equals("Revolver") && hand[0].field_Internal_VRCInput_1.field_Public_Single_0 == 1f && !stopperRight)
                    {
                        revolverUdon.SendCustomEvent("Fire");
                        stopperRight = true;
                    }
                    else
                    {
                        if (hand[0].field_Internal_VRC_Pickup_0.gameObject.name.Equals("Luger (0)") && hand[0].field_Internal_VRCInput_1.field_Public_Single_0 == 1f && !stopperRight)
                        {
                            luger0Udon.SendCustomEvent("Fire");
                            stopperRight = true;
                        }
                        else
                        {
                            if (hand[0].field_Internal_VRC_Pickup_0.gameObject.name.Equals("Shotgun (0)") && hand[0].field_Internal_VRCInput_1.field_Public_Single_0 == 1f && !stopperRight)
                            {
                                shotgunUdon.SendCustomEvent("Fire");
                                stopperRight = true;
                            }
                            else
                            {
                                if (hand[0].field_Internal_VRC_Pickup_0.gameObject.name.Equals("FlashCamera") && hand[0].field_Internal_VRCInput_1.field_Public_Single_0 == 1f && !stopperRight)
                                {
                                    cameraUdon.SendCustomNetworkEvent(0, "SyncPhoto");
                                    stopperRight = true;
                                }
                                else
                                {
                                    if (hand[0].field_Internal_VRCInput_1.field_Public_Single_0 != 1f)
                                    {
                                        stopperRight = false;
                                    }
                                }
                            }
                        }
                    }
                }
                if (hand[1].field_Internal_VRC_Pickup_0 != null)
                {
                    if (hand[1].field_Internal_VRC_Pickup_0.gameObject.name.Equals("Revolver") && hand[1].field_Internal_VRCInput_1.field_Public_Single_0 == 1f && !stopperLeft)
                    {
                        revolverUdon.SendCustomEvent("Fire");
                        stopperLeft = true;
                    }
                    else
                    {
                        if (hand[1].field_Internal_VRC_Pickup_0.gameObject.name.Equals("Luger (0)") && hand[1].field_Internal_VRCInput_1.field_Public_Single_0 == 1f && !stopperLeft)
                        {
                            luger0Udon.SendCustomEvent("Fire");
                            stopperLeft = true;
                        }
                        else
                        {
                            if (hand[1].field_Internal_VRC_Pickup_0.gameObject.name.Equals("Shotgun (0)") && hand[1].field_Internal_VRCInput_1.field_Public_Single_0 == 1f && !stopperLeft)
                            {
                                shotgunUdon.SendCustomEvent("Fire");
                                stopperLeft = true;
                            }
                            else
                            {
                                if (hand[1].field_Internal_VRC_Pickup_0.gameObject.name.Equals("FlashCamera") && hand[1].field_Internal_VRCInput_1.field_Public_Single_0 == 1f && !stopperLeft)
                                {
                                    cameraUdon.SendCustomNetworkEvent(0, "SyncPhoto");
                                    stopperLeft = true;
                                }
                                else
                                {
                                    if (hand[1].field_Internal_VRCInput_1.field_Public_Single_0 == 0f)
                                    {
                                        stopperLeft = false;
                                    }
                                }
                            }
                        }
                    }
                }
                yield return null;
            }
        }

        public static IEnumerator ShowMurdererOnNamePlate()
        {
            Transform[] allObjects = Resources.FindObjectsOfTypeAll<Transform>();
            GameObject murdererName = null;
            int num;
            for (int i = 0; i < allObjects.Length; i = num)
            {
                if (allObjects[i].gameObject.name.Equals("Murderer Name"))
                {
                    murdererName = allObjects[i].gameObject;
                }
                num = i + 1;
            }
            UnityEngine.Object.Destroy(murdererNameInstance);
            for (; ; )
            {
                Player[] players = ExtraDependencies.PlayerWrapper.GetAllPlayers();
                int num2;
                for (int j = 0; j < players.Length; j = num2)
                {
                    while (ExtraDependencies.PlayerWrapper.GetAPIUser(players[j]) == null)
                    {
                        yield return null;
                    }
                    if (ExtraDependencies.PlayerWrapper.GetAPIUser(players[j]).displayName.Equals(murdererName.GetComponent<Text>().text))
                    {
                        UnityEngine.Object.Destroy(murdererNameInstance);
                        murdererNameInstance = UnityEngine.Object.Instantiate<Transform>(players[j].gameObject.transform.Find("Player Nameplate/Canvas/Nameplate/Contents/Main/Text Container/Name")).gameObject;
                        murdererNameInstance.GetComponent<TextMeshProUGUI>().text = "Murderer";
                        murdererNameInstance.transform.parent = players[j].gameObject.transform.Find("Player Nameplate/Canvas/Nameplate/Contents/Main/Text Container").gameObject.transform;
                        murdererNameInstance.transform.localPosition = players[j].gameObject.transform.Find("Player Nameplate/Canvas/Nameplate/Contents/Main/Text Container").gameObject.transform.localPosition;
                        murdererNameInstance.transform.localRotation = players[j].gameObject.transform.Find("Player Nameplate/Canvas/Nameplate/Contents/Main/Text Container").gameObject.transform.localRotation;
                        murdererNameInstance.transform.localScale = players[j].gameObject.transform.Find("Player Nameplate/Canvas/Nameplate/Contents/Main/Text Container").gameObject.transform.localScale;
                        murdererNameInstance.GetComponent<TextMeshProUGUI>().color = Color.red;
                        while (ExtraDependencies.PlayerWrapper.GetAPIUser(players[j]).displayName.Equals(murdererName.GetComponent<Text>().text))
                        {
                            yield return null;
                        }
                        yield return null;
                    }
                    num2 = j + 1;
                }
                yield return new WaitForSeconds(2f);
                players = null;
            }
        }

        public static void LightsOFF()
        {
            UdonBehaviour component = GameObject.Find("Game Logic/Switch Boxes/Switchbox (0)").GetComponent<UdonBehaviour>();
            ExtraDependencies.WorldWrapper.SendUdonRPC(component.gameObject, "SwitchDown", null, false);
            UdonBehaviour component2 = GameObject.Find("Game Logic/Switch Boxes/Switchbox (1)").GetComponent<UdonBehaviour>();
            ExtraDependencies.WorldWrapper.SendUdonRPC(component2.gameObject, "SwitchDown", null, false);
            UdonBehaviour component3 = GameObject.Find("Game Logic/Switch Boxes/Switchbox (2)").GetComponent<UdonBehaviour>();
            ExtraDependencies.WorldWrapper.SendUdonRPC(component3.gameObject, "SwitchDown", null, false);
            UdonBehaviour component4 = GameObject.Find("Game Logic/Switch Boxes/Switchbox (3)").GetComponent<UdonBehaviour>();
            ExtraDependencies.WorldWrapper.SendUdonRPC(component4.gameObject, "SwitchDown", null, false);
        }

        public static void LightsON()
		{
			UdonBehaviour component = GameObject.Find("Game Logic/Switch Boxes/Switchbox (0)").GetComponent<UdonBehaviour>();
            ExtraDependencies.WorldWrapper.SendUdonRPC(component.gameObject, "SwitchUp", null, false);
			UdonBehaviour component2 = GameObject.Find("Game Logic/Switch Boxes/Switchbox (1)").GetComponent<UdonBehaviour>();
            ExtraDependencies.WorldWrapper.SendUdonRPC(component2.gameObject, "SwitchUp", null, false);
			UdonBehaviour component3 = GameObject.Find("Game Logic/Switch Boxes/Switchbox (2)").GetComponent<UdonBehaviour>();
            ExtraDependencies.WorldWrapper.SendUdonRPC(component3.gameObject, "SwitchUp", null, false);
			UdonBehaviour component4 = GameObject.Find("Game Logic/Switch Boxes/Switchbox (3)").GetComponent<UdonBehaviour>();
            ExtraDependencies.WorldWrapper.SendUdonRPC(component4.gameObject, "SwitchUp", null, false);
		}

        public static void AbortGame()
        {
            foreach (GameObject gameObject in Resources.FindObjectsOfTypeAll<GameObject>())
            {
                bool logicGate = gameObject.name.Contains("Game Logic");
                if (logicGate)
                {
                    gameObject.GetComponent<UdonBehaviour>().SendCustomNetworkEvent(0, "SyncAbort");
                }
            }
        }

        public static void StartGame()
        {
            foreach (GameObject gameObject in Resources.FindObjectsOfTypeAll<GameObject>())
            {
                bool logicGate = gameObject.name.Contains("Game Logic");
                if (logicGate)
                {
                    gameObject.GetComponent<UdonBehaviour>().SendCustomNetworkEvent(0, "SyncStartGame");
                }
            }
        }

    }
}
